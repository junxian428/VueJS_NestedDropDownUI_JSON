{"ast":null,"code":"export default {\n  data() {\n    return {\n      plcs: [{\n        name: 'PLC 1',\n        digitalAddresses: [{\n          name: 'Digital Address 1',\n          bitAddresses: ['Bit 1', 'Bit 2']\n        }\n        // ... other digital addresses\n        ],\n\n        analogAddresses: ['Analog Address 1', 'Analog Address 2']\n      }\n      // ... other PLCs\n      ],\n\n      expandedLevels: [] // Initialize in the created hook\n    };\n  },\n\n  created() {\n    this.expandedLevels = this.plcs.map(() => ({\n      plc: false,\n      digital: false,\n      analog: false,\n      address: []\n    }));\n  },\n  methods: {\n    toggleExpansion(level, plcIndex, subLevel = null) {\n      // Your existing toggleExpansion method code\n    }\n  }\n};","map":{"version":3,"names":["data","plcs","name","digitalAddresses","bitAddresses","analogAddresses","expandedLevels","created","map","plc","digital","analog","address","methods","toggleExpansion","level","plcIndex","subLevel"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n        <div class=\"plc\" @click=\"toggleExpansion('plc', plcIndex)\">\r\n          {{ plc.name }}\r\n        </div>\r\n        <div v-if=\"expandedLevels[plcIndex].plc\">\r\n          <div class=\"digital\" @click=\"toggleExpansion('digital', plcIndex)\">\r\n            Digital\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].digital\">\r\n            <div v-for=\"(address, addressIndex) in plc.digitalAddresses\" :key=\"'digital-' + plcIndex + '-' + addressIndex\">\r\n              <div class=\"address\" @click=\"toggleExpansion('address', plcIndex, addressIndex)\">\r\n                {{ address.name }}\r\n              </div>\r\n              <div v-if=\"expandedLevels[plcIndex].address[addressIndex]\">\r\n                <div class=\"bit-address\">\r\n                  Bit Addresses:\r\n                  <div v-for=\"bitAddress in address.bitAddresses\" :key=\"bitAddress\">\r\n                    {{ bitAddress }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"analog\" @click=\"toggleExpansion('analog', plcIndex)\">\r\n            Analog\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].analog\">\r\n            <div v-for=\"address in plc.analogAddresses\" :key=\"address\">\r\n              {{ address }} (Analog)\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            digitalAddresses: [\r\n              {\r\n                name: 'Digital Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2'],\r\n              },\r\n              // ... other digital addresses\r\n            ],\r\n            analogAddresses: ['Analog Address 1', 'Analog Address 2'],\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedLevels: [], // Initialize in the created hook\r\n      };\r\n    },\r\n    created() {\r\n      this.expandedLevels = this.plcs.map(() => ({\r\n        plc: false,\r\n        digital: false,\r\n        analog: false,\r\n        address: [],\r\n      }));\r\n    },\r\n    methods: {\r\n      toggleExpansion(level, plcIndex, subLevel = null) {\r\n        // Your existing toggleExpansion method code\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styling here */\r\n  </style>\r\n  "],"mappings":"AAsCE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CACJ;QACEC,IAAI,EAAE,OAAO;QACbC,gBAAgB,EAAE,CAChB;UACED,IAAI,EAAE,mBAAmB;UACzBE,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO;QACjC;QACA;QAAA,CACD;;QACDC,eAAe,EAAE,CAAC,kBAAkB,EAAE,kBAAkB;MAC1D;MACA;MAAA,CACD;;MACDC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,cAAa,GAAI,IAAI,CAACL,IAAI,CAACO,GAAG,CAAC,OAAO;MACzCC,GAAG,EAAE,KAAK;MACVC,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;IACX,CAAC,CAAC,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAO,GAAI,IAAI,EAAE;MAChD;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}