{"ast":null,"code":"export default {\n  data() {\n    return {\n      plcs: [{\n        name: 'PLC 1',\n        addresses: [{\n          name: 'Address 1',\n          bitAddresses: ['Bit 1', 'Bit 2']\n        }\n        // ... other addresses\n        ]\n      }\n      // ... other PLCs\n      ],\n\n      expandedAddresses: new Array(this.plcs.length).fill([]),\n      expandedBitAddresses: new Array(this.plcs.length).fill([])\n    };\n  },\n  methods: {\n    toggleExpansion(level, plcIndex, addressIndex = null) {\n      if (level === 'address') {\n        const addresses = this.plcs[plcIndex].addresses;\n        this.expandedAddresses[plcIndex] = addresses;\n        this.expandedBitAddresses[plcIndex] = new Array(addresses.length).fill(false);\n      } else if (level === 'bitAddress') {\n        const bitAddresses = this.plcs[plcIndex].addresses[addressIndex].bitAddresses;\n        this.expandedBitAddresses[plcIndex][addressIndex] = bitAddresses;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","plcs","name","addresses","bitAddresses","expandedAddresses","Array","length","fill","expandedBitAddresses","methods","toggleExpansion","level","plcIndex","addressIndex"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n            <td>\r\n              <button @click=\"toggleExpansion('address', plcIndex)\">\r\n                {{ plc.name }}\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <template v-for=\"(addresses, plcIndex) in expandedAddresses\">\r\n            <tr v-for=\"(address, addressIndex) in addresses\" :key=\"'address-' + plcIndex + '-' + addressIndex\">\r\n              <td>\r\n                <button @click=\"toggleExpansion('bitAddress', plcIndex, addressIndex)\">\r\n                  {{ address.name }}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            <tr v-for=\"(bitAddresses, addressIndex) in expandedBitAddresses[plcIndex]\">\r\n              <td v-if=\"bitAddresses\">\r\n                <span v-for=\"bitAddress in bitAddresses\" :key=\"bitAddress\">\r\n                  {{ bitAddress }}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </template>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            addresses: [\r\n              {\r\n                name: 'Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2']\r\n              },\r\n              // ... other addresses\r\n            ]\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedAddresses: new Array(this.plcs.length).fill([]),\r\n        expandedBitAddresses: new Array(this.plcs.length).fill([]),\r\n      };\r\n    },\r\n    methods: {\r\n      toggleExpansion(level, plcIndex, addressIndex = null) {\r\n        if (level === 'address') {\r\n          const addresses = this.plcs[plcIndex].addresses;\r\n          this.expandedAddresses[plcIndex] = addresses;\r\n          this.expandedBitAddresses[plcIndex] = new Array(addresses.length).fill(false);\r\n        } else if (level === 'bitAddress') {\r\n          const bitAddresses = this.plcs[plcIndex].addresses[addressIndex].bitAddresses;\r\n          this.expandedBitAddresses[plcIndex][addressIndex] = bitAddresses;\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAiCE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CACJ;QACEC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,CACT;UACED,IAAI,EAAE,WAAW;UACjBE,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO;QACjC;QACA;QAAA;MAEJ;MACA;MAAA,CACD;;MACDC,iBAAiB,EAAE,IAAIC,KAAK,CAAC,IAAI,CAACL,IAAI,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MACvDC,oBAAoB,EAAE,IAAIH,KAAK,CAAC,IAAI,CAACL,IAAI,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE;IAC3D,CAAC;EACH,CAAC;EACDE,OAAO,EAAE;IACPC,eAAeA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,YAAW,GAAI,IAAI,EAAE;MACpD,IAAIF,KAAI,KAAM,SAAS,EAAE;QACvB,MAAMT,SAAQ,GAAI,IAAI,CAACF,IAAI,CAACY,QAAQ,CAAC,CAACV,SAAS;QAC/C,IAAI,CAACE,iBAAiB,CAACQ,QAAQ,IAAIV,SAAS;QAC5C,IAAI,CAACM,oBAAoB,CAACI,QAAQ,IAAI,IAAIP,KAAK,CAACH,SAAS,CAACI,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;MAC/E,OAAO,IAAII,KAAI,KAAM,YAAY,EAAE;QACjC,MAAMR,YAAW,GAAI,IAAI,CAACH,IAAI,CAACY,QAAQ,CAAC,CAACV,SAAS,CAACW,YAAY,CAAC,CAACV,YAAY;QAC7E,IAAI,CAACK,oBAAoB,CAACI,QAAQ,CAAC,CAACC,YAAY,IAAIV,YAAY;MAClE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}