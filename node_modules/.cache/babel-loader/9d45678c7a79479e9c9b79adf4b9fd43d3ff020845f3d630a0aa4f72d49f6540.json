{"ast":null,"code":"export default {\n  data() {\n    return {\n      plcs: [{\n        name: 'PLC 1',\n        addresses: [{\n          name: 'Address 1',\n          bitAddresses: ['Bit 1', 'Bit 2']\n        }\n        // ... other addresses\n        ]\n      }\n      // ... other PLCs\n      ],\n\n      expandedLevels: [] // Initialize this in the created hook\n    };\n  },\n\n  created() {\n    this.expandedLevels = this.plcs.map(() => ({\n      plc: false,\n      address: []\n    }));\n  },\n  methods: {\n    // Your methods here\n  }\n};","map":{"version":3,"names":["data","plcs","name","addresses","bitAddresses","expandedLevels","created","map","plc","address","methods"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n        <div class=\"plc\" @click=\"toggleExpansion('plc', plcIndex)\">\r\n          {{ plc.name }}\r\n        </div>\r\n        <div v-if=\"expandedLevels[plcIndex].plc\">\r\n          <div v-for=\"(address, addressIndex) in plc.addresses\" :key=\"'address-' + plcIndex + '-' + addressIndex\">\r\n            <div class=\"address\" @click=\"toggleExpansion('address', plcIndex, addressIndex)\">\r\n              {{ address.name }}\r\n            </div>\r\n            <div v-if=\"expandedLevels[plcIndex].address[addressIndex]\">\r\n              <div class=\"bit-address\">\r\n                Bit Addresses:\r\n                <div v-for=\"bitAddress in address.bitAddresses\" :key=\"bitAddress\">\r\n                  {{ bitAddress }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            addresses: [\r\n              {\r\n                name: 'Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2']\r\n              },\r\n              // ... other addresses\r\n            ]\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedLevels: [], // Initialize this in the created hook\r\n      };\r\n    },\r\n    created() {\r\n      this.expandedLevels = this.plcs.map(() => ({ plc: false, address: [] }));\r\n    },\r\n    methods: {\r\n      // Your methods here\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  \r\n  <style>\r\n  /* Add your styling here */\r\n  </style>\r\n  "],"mappings":"AA0BE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CACJ;QACEC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,CACT;UACED,IAAI,EAAE,WAAW;UACjBE,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO;QACjC;QACA;QAAA;MAEJ;MACA;MAAA,CACD;;MACDC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,cAAa,GAAI,IAAI,CAACJ,IAAI,CAACM,GAAG,CAAC,OAAO;MAAEC,GAAG,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC,CAAC;EAC1E,CAAC;EACDC,OAAO,EAAE;IACP;EAAA;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}