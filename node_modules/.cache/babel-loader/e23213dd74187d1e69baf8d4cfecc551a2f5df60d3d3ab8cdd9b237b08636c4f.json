{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"table\", null, [_createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.plcs, (plc, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: 'plc-' + plcIndex\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleExpansion('address', plcIndex)\n    }, _toDisplayString(plc.name), 9 /* TEXT, PROPS */, _hoisted_1)])]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.expandedAddresses, (addresses, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", null, [addresses.length > 0 ? (_openBlock(), _createElementBlock(\"td\", _hoisted_2, [_createElementVNode(\"table\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(addresses, (address, addressIndex) => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: 'address-' + plcIndex + '-' + addressIndex\n      }, [_createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n        onClick: $event => $options.toggleExpansion('bitAddress', plcIndex, addressIndex)\n      }, _toDisplayString(address.name), 9 /* TEXT, PROPS */, _hoisted_3)])]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 256 /* UNKEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.expandedBitAddresses, (bitAddresses, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", null, [bitAddresses.length > 0 ? (_openBlock(), _createElementBlock(\"td\", _hoisted_4, [_createElementVNode(\"table\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(bitAddresses, bitAddress => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: bitAddress\n      }, [_createElementVNode(\"td\", null, _toDisplayString(bitAddress), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 256 /* UNKEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","plcs","plc","plcIndex","key","onClick","$event","$options","toggleExpansion","name","_hoisted_1","expandedAddresses","addresses","length","_hoisted_2","address","addressIndex","_hoisted_3","expandedBitAddresses","bitAddresses","_hoisted_4","bitAddress","_toDisplayString"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n            <td>\r\n              <button @click=\"toggleExpansion('address', plcIndex)\">\r\n                {{ plc.name }}\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr v-for=\"(addresses, plcIndex) in expandedAddresses\">\r\n            <td v-if=\"addresses.length > 0\">\r\n              <table>\r\n                <tr v-for=\"(address, addressIndex) in addresses\" :key=\"'address-' + plcIndex + '-' + addressIndex\">\r\n                  <td>\r\n                    <button @click=\"toggleExpansion('bitAddress', plcIndex, addressIndex)\">\r\n                      {{ address.name }}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </td>\r\n          </tr>\r\n          <tr v-for=\"(bitAddresses, plcIndex) in expandedBitAddresses\">\r\n            <td v-if=\"bitAddresses.length > 0\">\r\n              <table>\r\n                <tr v-for=\"bitAddress in bitAddresses\" :key=\"bitAddress\">\r\n                  <td>{{ bitAddress }}</td>\r\n                </tr>\r\n              </table>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            addresses: [\r\n              {\r\n                name: 'Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2']\r\n              },\r\n              // ... other addresses\r\n            ]\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedAddresses: new Array(this.plcs.length).fill([]),\r\n        expandedBitAddresses: new Array(this.plcs.length).fill([]),\r\n      };\r\n    },\r\n    methods: {\r\n      toggleExpansion(level, plcIndex, addressIndex = null) {\r\n        if (level === 'address') {\r\n          this.$set(this.expandedAddresses, plcIndex, this.plcs[plcIndex].addresses);\r\n          this.$set(this.expandedBitAddresses, plcIndex, []);\r\n        } else if (level === 'bitAddress') {\r\n          this.$set(this.expandedBitAddresses[plcIndex], addressIndex, this.plcs[plcIndex].addresses[addressIndex].bitAddresses);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;;;;;;;;;uBACIA,mBAAA,CAkCM,cAjCJC,mBAAA,CAgCQ,gBA/BNA,mBAAA,CA8BQ,iB,kBA7BND,mBAAA,CAMKE,SAAA,QAAAC,WAAA,CANyBC,KAAA,CAAAC,IAAI,GAAtBC,GAAG,EAAEC,QAAQ;yBAAzBP,mBAAA,CAMK;MANgCQ,GAAG,WAAWD;QACjDN,mBAAA,CAIK,aAHHA,mBAAA,CAES;MAFAQ,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYL,QAAQ;wBAC9CD,GAAG,CAACO,IAAI,wBAAAC,UAAA,E;qDAIjBd,mBAAA,CAYKE,SAAA,QAAAC,WAAA,CAZ+BC,KAAA,CAAAW,iBAAiB,GAAzCC,SAAS,EAAET,QAAQ;yBAA/BP,mBAAA,CAYK,aAXOgB,SAAS,CAACC,MAAM,Q,cAA1BjB,mBAAA,CAUK,MAAAkB,UAAA,GATHjB,mBAAA,CAQQ,iB,kBAPND,mBAAA,CAMKE,SAAA,QAAAC,WAAA,CANiCa,SAAS,GAAnCG,OAAO,EAAEC,YAAY;2BAAjCpB,mBAAA,CAMK;QAN6CQ,GAAG,eAAeD,QAAQ,SAASa;UACnFnB,mBAAA,CAIK,aAHHA,mBAAA,CAES;QAFAQ,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,eAAeL,QAAQ,EAAEa,YAAY;0BAC/DD,OAAO,CAACN,IAAI,wBAAAQ,UAAA,E;;uDAO3BrB,mBAAA,CAQKE,SAAA,QAAAC,WAAA,CARkCC,KAAA,CAAAkB,oBAAoB,GAA/CC,YAAY,EAAEhB,QAAQ;yBAAlCP,mBAAA,CAQK,aAPOuB,YAAY,CAACN,MAAM,Q,cAA7BjB,mBAAA,CAMK,MAAAwB,UAAA,GALHvB,mBAAA,CAIQ,iB,kBAHND,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFoBoB,YAAY,EAA1BE,UAAU;2BAArBzB,mBAAA,CAEK;QAFmCQ,GAAG,EAAEiB;MAAU,IACrDxB,mBAAA,CAAyB,YAAAyB,gBAAA,CAAlBD,UAAU,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}