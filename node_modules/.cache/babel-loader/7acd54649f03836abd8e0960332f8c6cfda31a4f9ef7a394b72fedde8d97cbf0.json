{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = {\n  class: \"bit-address\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = {\n  key: 0\n};\nconst _hoisted_12 = {\n  class: \"bit-address\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.plcs, (plc, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'plc-' + plcIndex\n    }, [_createElementVNode(\"div\", {\n      class: \"plc\",\n      onClick: $event => $options.toggleExpansion('plc', plcIndex)\n    }, _toDisplayString(plc.name), 9 /* TEXT, PROPS */, _hoisted_1), $data.expandedLevels[plcIndex].plc ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n      class: \"digital\",\n      onClick: $event => $options.toggleExpansion('digital', plcIndex)\n    }, \" Digital \", 8 /* PROPS */, _hoisted_3), $data.expandedLevels[plcIndex].digital ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n      class: \"address\",\n      onClick: $event => $options.toggleExpansion('address', plcIndex, 'digital')\n    }, \" Digital Addresses \", 8 /* PROPS */, _hoisted_5), $data.expandedLevels[plcIndex].address.digital ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createTextVNode(\" Bit Addresses: \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(plc.digitalAddresses, bitAddress => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: bitAddress\n      }, _toDisplayString(bitAddress), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: \"analog\",\n      onClick: $event => $options.toggleExpansion('analog', plcIndex)\n    }, \" Analog \", 8 /* PROPS */, _hoisted_8), $data.expandedLevels[plcIndex].analog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"div\", {\n      class: \"address\",\n      onClick: $event => $options.toggleExpansion('address', plcIndex, 'analog')\n    }, \" Analog Addresses \", 8 /* PROPS */, _hoisted_10), $data.expandedLevels[plcIndex].address.analog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createTextVNode(\" Bit Addresses: \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(plc.analogAddresses, bitAddress => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: bitAddress\n      }, _toDisplayString(bitAddress), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_renderList","$data","plcs","plc","plcIndex","key","_createElementVNode","onClick","$event","$options","toggleExpansion","name","_hoisted_1","expandedLevels","_hoisted_2","_hoisted_3","digital","_hoisted_4","_hoisted_5","address","_hoisted_6","_hoisted_7","digitalAddresses","bitAddress","_toDisplayString","_hoisted_8","analog","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","analogAddresses"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n        <div class=\"plc\" @click=\"toggleExpansion('plc', plcIndex)\">\r\n          {{ plc.name }}\r\n        </div>\r\n        <div v-if=\"expandedLevels[plcIndex].plc\">\r\n          <div class=\"digital\" @click=\"toggleExpansion('digital', plcIndex)\">\r\n            Digital\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].digital\">\r\n            <div class=\"address\" @click=\"toggleExpansion('address', plcIndex, 'digital')\">\r\n              Digital Addresses\r\n            </div>\r\n            <div v-if=\"expandedLevels[plcIndex].address.digital\">\r\n              <div class=\"bit-address\">\r\n                Bit Addresses:\r\n                <div v-for=\"bitAddress in plc.digitalAddresses\" :key=\"bitAddress\">\r\n                  {{ bitAddress }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"analog\" @click=\"toggleExpansion('analog', plcIndex)\">\r\n            Analog\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].analog\">\r\n            <div class=\"address\" @click=\"toggleExpansion('address', plcIndex, 'analog')\">\r\n              Analog Addresses\r\n            </div>\r\n            <div v-if=\"expandedLevels[plcIndex].address.analog\">\r\n              <div class=\"bit-address\">\r\n                Bit Addresses:\r\n                <div v-for=\"bitAddress in plc.analogAddresses\" :key=\"bitAddress\">\r\n                  {{ bitAddress }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            digitalAddresses: [\r\n              {\r\n                name: 'Digital Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2'],\r\n              },\r\n              // ... other digital addresses\r\n            ],\r\n            analogAddresses: ['Analog Address 1', 'Analog Address 2'],\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedLevels: [], // Initialize in the created hook\r\n      };\r\n    },\r\n    created() {\r\n      this.expandedLevels = this.plcs.map(() => ({\r\n        plc: false,\r\n        digital: false,\r\n        analog: false,\r\n        channel: [],\r\n      }));\r\n    },\r\n    methods: {\r\n      toggleExpansion(level, plcIndex, subLevel = null) {\r\n        // Your existing toggleExpansion method code\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styling here */\r\n  </style>\r\n  "],"mappings":";;;;;;;;;;;;;;EAemBA,KAAK,EAAC;AAAa;;;;;;;;;;EAgBnBA,KAAK,EAAC;AAAa;;uBA9BlCC,mBAAA,CAwCM,e,kBAvCJA,mBAAA,CAsCMC,SAAA,QAAAC,WAAA,CAtCyBC,KAAA,CAAAC,IAAI,GAAtBC,GAAG,EAAEC,QAAQ;yBAA1BN,mBAAA,CAsCM;MAtCgCO,GAAG,WAAWD;QAClDE,mBAAA,CAEM;MAFDT,KAAK,EAAC,KAAK;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,QAAQN,QAAQ;wBACnDD,GAAG,CAACQ,IAAI,wBAAAC,UAAA,GAEFX,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAED,GAAG,I,cAAvCL,mBAAA,CAiCM,OAAAgB,UAAA,GAhCJR,mBAAA,CAEM;MAFDT,KAAK,EAAC,SAAS;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYN,QAAQ;OAAG,WAEnE,iBAAAW,UAAA,GACWd,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEY,OAAO,I,cAA3ClB,mBAAA,CAYM,OAAAmB,UAAA,GAXJX,mBAAA,CAEM;MAFDT,KAAK,EAAC,SAAS;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYN,QAAQ;OAAc,qBAE9E,iBAAAc,UAAA,GACWjB,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEe,OAAO,CAACH,OAAO,I,cAAnDlB,mBAAA,CAOM,OAAAsB,UAAA,GANJd,mBAAA,CAKM,OALNe,UAKM,G,iBALmB,kBAEvB,I,kBAAAvB,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFoBG,GAAG,CAACmB,gBAAgB,EAAlCC,UAAU;2BAAtBzB,mBAAA,CAEM;QAF2CO,GAAG,EAAEkB;MAAU,GAAAC,gBAAA,CAC3DD,UAAU;oHAKrBjB,mBAAA,CAEM;MAFDT,KAAK,EAAC,QAAQ;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,WAAWN,QAAQ;OAAG,UAEjE,iBAAAqB,UAAA,GACWxB,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEsB,MAAM,I,cAA1C5B,mBAAA,CAYM,OAAA6B,UAAA,GAXJrB,mBAAA,CAEM;MAFDT,KAAK,EAAC,SAAS;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYN,QAAQ;OAAa,oBAE7E,iBAAAwB,WAAA,GACW3B,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEe,OAAO,CAACO,MAAM,I,cAAlD5B,mBAAA,CAOM,OAAA+B,WAAA,GANJvB,mBAAA,CAKM,OALNwB,WAKM,G,iBALmB,kBAEvB,I,kBAAAhC,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFoBG,GAAG,CAAC4B,eAAe,EAAjCR,UAAU;2BAAtBzB,mBAAA,CAEM;QAF0CO,GAAG,EAAEkB;MAAU,GAAAC,gBAAA,CAC1DD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}