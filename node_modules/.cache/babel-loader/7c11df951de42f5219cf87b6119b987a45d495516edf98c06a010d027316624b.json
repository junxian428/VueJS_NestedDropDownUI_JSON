{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"table\", null, [_createElementVNode(\"tbody\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.toggleExpansion(0, 'plc'))\n  }, \"Show PLC\"), $data.expandedPlcRows[0] ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString($data.plcs[0].name), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.expandedPlcRows, (addresses, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: plcIndex\n    }, [addresses ? (_openBlock(), _createElementBlock(\"td\", _hoisted_2, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleExpansion(plcIndex, 'address', 0)\n    }, \"Show Address\", 8 /* PROPS */, _hoisted_3), $data.expandedAddressRows[plcIndex][0] ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, _toDisplayString($data.plcs[plcIndex].addresses[0].name), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" ... other rows ... \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.expandedAddressRows, (bitAddresses, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: plcIndex\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(bitAddresses, (addressBits, addressIndex) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: addressIndex\n      }, [_createElementVNode(\"button\", {\n        onClick: $event => $options.toggleExpansion(plcIndex, 'bitAddress', addressIndex)\n      }, \"Show Bit Address\", 8 /* PROPS */, _hoisted_5), _ctx.expandedBitAddressRows[plcIndex][addressIndex] ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, _toDisplayString(addressBits), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","$event","$options","toggleExpansion","$data","expandedPlcRows","_hoisted_1","_toDisplayString","plcs","name","_Fragment","_renderList","addresses","plcIndex","key","_hoisted_2","_hoisted_3","expandedAddressRows","_hoisted_4","_createCommentVNode","bitAddresses","addressBits","addressIndex","_hoisted_5","_ctx","expandedBitAddressRows","_hoisted_6"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <button @click=\"toggleExpansion(0, 'plc')\">Show PLC</button>\r\n              <span v-if=\"expandedPlcRows[0]\">{{ plcs[0].name }}</span>\r\n            </td>\r\n          </tr>\r\n          <tr v-for=\"(addresses, plcIndex) in expandedPlcRows\" :key=\"plcIndex\">\r\n            <td v-if=\"addresses\">\r\n              <button @click=\"toggleExpansion(plcIndex, 'address', 0)\">Show Address</button>\r\n              <span v-if=\"expandedAddressRows[plcIndex][0]\">{{ plcs[plcIndex].addresses[0].name }}</span>\r\n            </td>\r\n          </tr>\r\n          <!-- ... other rows ... -->\r\n          <tr v-for=\"(bitAddresses, plcIndex) in expandedAddressRows\" :key=\"plcIndex\">\r\n          <td v-for=\"(addressBits, addressIndex) in bitAddresses\" :key=\"addressIndex\">\r\n            <button @click=\"toggleExpansion(plcIndex, 'bitAddress', addressIndex)\">Show Bit Address</button>\r\n            <span v-if=\"expandedBitAddressRows[plcIndex][addressIndex]\">{{ addressBits }}</span>\r\n          </td>\r\n        </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            addresses: [\r\n              {\r\n                name: 'Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2']\r\n              },\r\n              // ... other addresses\r\n            ]\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedPlcRows: [],\r\n        expandedAddressRows: []\r\n      };\r\n    },\r\n    methods: {\r\n      toggleExpansion(plcIndex, level, addressIndex) {\r\n        if (level === 'plc') {\r\n          this.expandedPlcRows[plcIndex] = !this.expandedPlcRows[plcIndex];\r\n          this.expandedAddressRows[plcIndex] = [];\r\n        } else if (level === 'address') {\r\n          this.expandedAddressRows[plcIndex][addressIndex] = !this.expandedAddressRows[plcIndex][addressIndex];\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "],"mappings":";;;;;;;;;;;;;;;;uBACIA,mBAAA,CAwBM,cAvBJC,mBAAA,CAsBQ,gBArBNA,mBAAA,CAoBQ,gBAnBNA,mBAAA,CAKK,aAJHA,mBAAA,CAGK,aAFHA,mBAAA,CAA4D;IAAnDC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe;KAAY,UAAQ,GACvCC,KAAA,CAAAC,eAAe,O,cAA3BR,mBAAA,CAAyD,QAAAS,UAAA,EAAAC,gBAAA,CAAtBH,KAAA,CAAAI,IAAI,IAAIC,IAAI,oB,0DAGnDZ,mBAAA,CAKKa,SAAA,QAAAC,WAAA,CAL+BP,KAAA,CAAAC,eAAe,GAAvCO,SAAS,EAAEC,QAAQ;yBAA/BhB,mBAAA,CAKK;MALiDiB,GAAG,EAAED;IAAQ,IACvDD,SAAS,I,cAAnBf,mBAAA,CAGK,MAAAkB,UAAA,GAFHjB,mBAAA,CAA8E;MAArEC,OAAK,EAAAE,MAAA,IAAEC,QAAA,CAAAC,eAAe,CAACU,QAAQ;OAAiB,cAAY,iBAAAG,UAAA,GACzDZ,KAAA,CAAAa,mBAAmB,CAACJ,QAAQ,Q,cAAxChB,mBAAA,CAA2F,QAAAqB,UAAA,EAAAX,gBAAA,CAA1CH,KAAA,CAAAI,IAAI,CAACK,QAAQ,EAAED,SAAS,IAAIH,IAAI,oB;kCAGrFU,mBAAA,wBAA2B,G,kBAC3BtB,mBAAA,CAKGa,SAAA,QAAAC,WAAA,CALoCP,KAAA,CAAAa,mBAAmB,GAA9CG,YAAY,EAAEP,QAAQ;yBAAlChB,mBAAA,CAKG;MAL0DiB,GAAG,EAAED;IAAQ,K,kBAC1EhB,mBAAA,CAGKa,SAAA,QAAAC,WAAA,CAHqCS,YAAY,GAA1CC,WAAW,EAAEC,YAAY;2BAArCzB,mBAAA,CAGK;QAHoDiB,GAAG,EAAEQ;MAAY,IACxExB,mBAAA,CAAgG;QAAvFC,OAAK,EAAAE,MAAA,IAAEC,QAAA,CAAAC,eAAe,CAACU,QAAQ,gBAAgBS,YAAY;SAAG,kBAAgB,iBAAAC,UAAA,GAC3EC,IAAA,CAAAC,sBAAsB,CAACZ,QAAQ,EAAES,YAAY,K,cAAzDzB,mBAAA,CAAoF,QAAA6B,UAAA,EAAAnB,gBAAA,CAArBc,WAAW,oB"},"metadata":{},"sourceType":"module","externalDependencies":[]}