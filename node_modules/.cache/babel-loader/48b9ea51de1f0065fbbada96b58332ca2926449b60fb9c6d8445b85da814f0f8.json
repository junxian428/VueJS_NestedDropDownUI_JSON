{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = {\n  class: \"bit-address\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.plcs, (plc, plcIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'plc-' + plcIndex\n    }, [_createElementVNode(\"div\", {\n      class: \"plc\",\n      onClick: $event => $options.toggleExpansion('plc', plcIndex)\n    }, _toDisplayString(plc.name), 9 /* TEXT, PROPS */, _hoisted_1), $data.expandedLevels[plcIndex].plc ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n      class: \"digital\",\n      onClick: $event => $options.toggleExpansion('digital', plcIndex)\n    }, \" Digital \", 8 /* PROPS */, _hoisted_3), $data.expandedLevels[plcIndex].digital ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(plc.digitalAddresses, (address, addressIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: 'digital-' + plcIndex + '-' + addressIndex\n      }, [_createElementVNode(\"div\", {\n        class: \"address\",\n        onClick: $event => $options.toggleExpansion('address', plcIndex, addressIndex)\n      }, _toDisplayString(address.name), 9 /* TEXT, PROPS */, _hoisted_5), $data.expandedLevels[plcIndex].address[addressIndex] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createTextVNode(\" Bit Addresses: \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(address.bitAddresses, bitAddress => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: bitAddress\n        }, _toDisplayString(bitAddress), 1 /* TEXT */);\n      }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: \"analog\",\n      onClick: $event => $options.toggleExpansion('analog', plcIndex)\n    }, \" Analog \", 8 /* PROPS */, _hoisted_8), $data.expandedLevels[plcIndex].analog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(plc.analogAddresses, address => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: address\n      }, _toDisplayString(address) + \" (Analog) \", 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_renderList","$data","plcs","plc","plcIndex","key","_createElementVNode","onClick","$event","$options","toggleExpansion","name","_hoisted_1","expandedLevels","_hoisted_2","_hoisted_3","digital","_hoisted_4","digitalAddresses","address","addressIndex","_hoisted_5","_hoisted_6","_hoisted_7","bitAddresses","bitAddress","_toDisplayString","_hoisted_8","analog","_hoisted_9","analogAddresses"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-Digital-Analog\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-for=\"(plc, plcIndex) in plcs\" :key=\"'plc-' + plcIndex\">\r\n        <div class=\"plc\" @click=\"toggleExpansion('plc', plcIndex)\">\r\n          {{ plc.name }}\r\n        </div>\r\n        <div v-if=\"expandedLevels[plcIndex].plc\">\r\n          <div class=\"digital\" @click=\"toggleExpansion('digital', plcIndex)\">\r\n            Digital\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].digital\">\r\n            <div v-for=\"(address, addressIndex) in plc.digitalAddresses\" :key=\"'digital-' + plcIndex + '-' + addressIndex\">\r\n              <div class=\"address\" @click=\"toggleExpansion('address', plcIndex, addressIndex)\">\r\n                {{ address.name }}\r\n              </div>\r\n              <div v-if=\"expandedLevels[plcIndex].address[addressIndex]\">\r\n                <div class=\"bit-address\">\r\n                  Bit Addresses:\r\n                  <div v-for=\"bitAddress in address.bitAddresses\" :key=\"bitAddress\">\r\n                    {{ bitAddress }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"analog\" @click=\"toggleExpansion('analog', plcIndex)\">\r\n            Analog\r\n          </div>\r\n          <div v-if=\"expandedLevels[plcIndex].analog\">\r\n            <div v-for=\"address in plc.analogAddresses\" :key=\"address\">\r\n              {{ address }} (Analog)\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        plcs: [\r\n          {\r\n            name: 'PLC 1',\r\n            digitalAddresses: [\r\n              {\r\n                name: 'Digital Address 1',\r\n                bitAddresses: ['Bit 1', 'Bit 2'],\r\n              },\r\n              // ... other digital addresses\r\n            ],\r\n            analogAddresses: ['Analog Address 1', 'Analog Address 2'],\r\n          },\r\n          // ... other PLCs\r\n        ],\r\n        expandedLevels: this.plcs.map(() => ({\r\n          plc: false,\r\n          digital: false,\r\n          analog: false,\r\n          address: [],\r\n        })),\r\n      };\r\n    },\r\n    methods: {\r\n      toggleExpansion(level, plcIndex, subLevel = null) {\r\n        const levels = this.expandedLevels[plcIndex];\r\n        if (subLevel) {\r\n          levels.address[subLevel] = !levels.address[subLevel];\r\n        } else {\r\n          for (const key in levels) {\r\n            if (key === level) {\r\n              levels[key] = !levels[key];\r\n            } else if (key !== 'plc') {\r\n              levels[key] = false;\r\n            }\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styling here */\r\n  </style>\r\n  "],"mappings":";;;;;;;;;;;;;;EAgBqBA,KAAK,EAAC;AAAa;;;;;;uBAfpCC,mBAAA,CAkCM,e,kBAjCJA,mBAAA,CAgCMC,SAAA,QAAAC,WAAA,CAhCyBC,KAAA,CAAAC,IAAI,GAAtBC,GAAG,EAAEC,QAAQ;yBAA1BN,mBAAA,CAgCM;MAhCgCO,GAAG,WAAWD;QAClDE,mBAAA,CAEM;MAFDT,KAAK,EAAC,KAAK;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,QAAQN,QAAQ;wBACnDD,GAAG,CAACQ,IAAI,wBAAAC,UAAA,GAEFX,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAED,GAAG,I,cAAvCL,mBAAA,CA2BM,OAAAgB,UAAA,GA1BJR,mBAAA,CAEM;MAFDT,KAAK,EAAC,SAAS;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYN,QAAQ;OAAG,WAEnE,iBAAAW,UAAA,GACWd,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEY,OAAO,I,cAA3ClB,mBAAA,CAcM,OAAAmB,UAAA,I,kBAbJnB,mBAAA,CAYMC,SAAA,QAAAC,WAAA,CAZiCG,GAAG,CAACe,gBAAgB,GAA9CC,OAAO,EAAEC,YAAY;2BAAlCtB,mBAAA,CAYM;QAZwDO,GAAG,eAAeD,QAAQ,SAASgB;UAC/Fd,mBAAA,CAEM;QAFDT,KAAK,EAAC,SAAS;QAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,YAAYN,QAAQ,EAAEgB,YAAY;0BACzED,OAAO,CAACR,IAAI,wBAAAU,UAAA,GAENpB,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEe,OAAO,CAACC,YAAY,K,cAAxDtB,mBAAA,CAOM,OAAAwB,UAAA,GANJhB,mBAAA,CAKM,OALNiB,UAKM,G,iBALmB,kBAEvB,I,kBAAAzB,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFoBmB,OAAO,CAACK,YAAY,EAAlCC,UAAU;6BAAtB3B,mBAAA,CAEM;UAF2CO,GAAG,EAAEoB;QAAU,GAAAC,gBAAA,CAC3DD,UAAU;;2EAMvBnB,mBAAA,CAEM;MAFDT,KAAK,EAAC,QAAQ;MAAEU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,WAAWN,QAAQ;OAAG,UAEjE,iBAAAuB,UAAA,GACW1B,KAAA,CAAAY,cAAc,CAACT,QAAQ,EAAEwB,MAAM,I,cAA1C9B,mBAAA,CAIM,OAAA+B,UAAA,I,kBAHJ/B,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFiBG,GAAG,CAAC2B,eAAe,EAA9BX,OAAO;2BAAnBrB,mBAAA,CAEM;QAFuCO,GAAG,EAAEc;MAAO,GAAAO,gBAAA,CACpDP,OAAO,IAAG,YACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}